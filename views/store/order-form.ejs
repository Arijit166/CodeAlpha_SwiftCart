<%- include('../partials/head') %>
<%- include('../partials/nav') %>

<div class="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 relative overflow-hidden">
  <!-- Animated Background Elements -->
  <div class="fixed inset-0 overflow-hidden pointer-events-none">
    <div class="absolute -top-40 -right-40 w-96 h-96 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-pulse"></div>
    <div class="absolute -bottom-40 -left-40 w-96 h-96 bg-gradient-to-br from-pink-500 to-red-500 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-pulse animation-delay-2000"></div>
    <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-br from-cyan-500 to-blue-500 rounded-full mix-blend-multiply filter blur-3xl opacity-20 animate-pulse animation-delay-4000"></div>
  </div>

  <div class="relative container mx-auto px-4 py-12 z-10">
    <!-- Header -->
    <div class="text-center mb-16">
      <h1 class="text-5xl md:text-6xl font-black text-white mb-4 drop-shadow-2xl">
        Place Your
        <span class="bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent">
          Order
        </span>
      </h1>
      
      <div class="mt-8 flex justify-center">
        <div class="h-1 w-24 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full animate-pulse"></div>
      </div>
    </div>

    <div class="max-w-4xl mx-auto">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        
        <!-- Product Details -->
        <div class="bg-white/10 backdrop-blur-xl rounded-2xl overflow-hidden border border-white/20 shadow-2xl">
          <div class="relative">
            <img src="/<%= product.image %>" alt="<%= product.name %>" class="w-full h-64 object-cover">
            <div class="absolute top-4 right-4 bg-gradient-to-r from-yellow-400 to-orange-500 text-white rounded-full px-3 py-1 flex items-center shadow-lg">
              <span class="text-sm font-bold">‚≠ê <%= product.rating %></span>
            </div>
          </div>
          
          <div class="p-6">
            <h3 class="text-2xl font-bold text-white mb-4 drop-shadow-lg">
              <%= product.name %>
            </h3>
            <div class="text-3xl font-black text-white drop-shadow-lg mb-4">
              <span class="bg-gradient-to-r from-green-400 to-emerald-400 bg-clip-text text-transparent">‚Çπ<%= product.price %></span>
            </div>
          </div>
        </div>

        <!-- Order Form -->
        <div class="bg-white/10 backdrop-blur-xl rounded-2xl border border-white/20 shadow-2xl p-8">
          <h3 class="text-2xl font-bold text-white mb-6 drop-shadow-lg">Order Details</h3>
          
          <form id="orderForm">
            <input type="hidden" id="productId" value="<%= product._id %>">
            <input type="hidden" id="productPrice" value="<%= product.price %>">
            <input type="hidden" id="razorpayKey" value="<%= process.env.RAZORPAY_KEY_ID %>">
            <input type="hidden" id="productName" value="<%= product.name %>">
            <input type="hidden" id="productImage" value="/<%= product.image %>">
            <input type="hidden" id="userName" value="<%= user.firstName %> <%= user.lastName || '' %>">
            <input type="hidden" id="userEmail" value="<%= user.email %>">
            
            <!-- Quantity Selection -->
            <div class="mb-6">
              <label class="block text-white font-semibold mb-3">Quantity:</label>
              <div class="flex items-center justify-center space-x-4">
                <button type="button" id="decreaseBtn" class="bg-gradient-to-r from-red-500 to-red-600 text-white w-12 h-12 rounded-full font-bold text-xl hover:scale-110 transition-transform duration-200">
                  -
                </button>
                <input type="number" id="quantity" value="1" min="1" max="10" readonly class="w-20 h-12 text-center text-2xl font-bold bg-white/20 backdrop-blur-sm border border-white/30 rounded-xl text-white">
                <button type="button" id="increaseBtn" class="bg-gradient-to-r from-green-500 to-green-600 text-white w-12 h-12 rounded-full font-bold text-xl hover:scale-110 transition-transform duration-200">
                  +
                </button>
              </div>
            </div>

            <!-- Total Amount Display -->
            <div class="mb-6 text-center">
                <div class="text-lg text-gray-300 mb-2">Total Amount:</div>
                <div class="text-4xl font-black">
                    <span class="bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent">
                    ‚Çπ<span id="totalAmount"><%= product.price %></span>
                    </span>
                </div>
            </div>

            <!-- Order Button -->
            <button type="submit" class="w-full bg-gradient-to-r from-cyan-400 to-purple-500 hover:from-cyan-500 hover:to-purple-600 text-white text-xl font-bold py-4 px-6 rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105">
              <span class="mr-2">üõçÔ∏è</span>
              Pay with Razorpay
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>
  <div id="successModal" class="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 hidden opacity-0 transition-all duration-500">
    <div class="relative bg-white/10 backdrop-blur-xl rounded-3xl border border-white/20 shadow-2xl max-w-lg mx-4 transform scale-90 transition-all duration-500" id="successContent">
      
      <!-- Animated Success Icon -->
      <div class="text-center pt-8 pb-4">
        <div class="inline-flex items-center justify-center w-24 h-24 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full shadow-lg animate-bounce">
          <svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"/>
          </svg>
        </div>
      </div>

      <div class="px-8 pb-8 bg-gradient-to-b from-white/15 to-white/5 backdrop-blur-sm rounded-3xl">
        <!-- Success Header -->
        <div class="text-center mb-6">
          <h3 class="text-4xl font-extrabold text-transparent bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text drop-shadow-2xl mb-2">
            Order Placed Successfully!
          </h3>
          <p class="text-lg text-gray-200 font-light drop-shadow-lg">
            Your order has been confirmed and is being processed
          </p>
          <div class="mt-4 flex justify-center">
            <div class="h-1 w-20 bg-gradient-to-r from-green-400 to-emerald-400 rounded-full animate-pulse"></div>
          </div>
        </div>

        <!-- Order Details -->
        <div class="bg-white/10 rounded-xl p-4 mb-6 border border-white/20">
          <div class="text-center text-white">
            <div class="text-sm text-gray-300 mb-1">Product:</div>
            <div class="text-lg font-bold mb-2" id="successProductName"></div>
            
            <div class="flex justify-center space-x-6 text-sm">
              <div>
                <div class="text-gray-300">Quantity:</div>
                <div class="font-bold text-green-300" id="successQuantity"></div>
              </div>
              <div>
                <div class="text-gray-300">Total:</div>
                <div class="font-bold text-yellow-300" id="successTotal"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex gap-3">
          <button 
            onclick="closeSuccessModal()" 
            class="flex-1 bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600 text-white font-bold py-3 px-4 rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105">
            View All Orders
          </button>
          
          <button 
            onclick="orderAgain()" 
            class="flex-1 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white font-bold py-3 px-4 rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105">
            Order Again
          </button>
        </div>

        <!-- Celebration Elements -->
        <div class="absolute -top-4 -left-4 text-2xl animate-bounce animation-delay-1000">üéâ</div>
        <div class="absolute -top-2 -right-4 text-2xl animate-bounce animation-delay-2000">üõçÔ∏è</div>
        <div class="absolute -bottom-4 -left-2 text-2xl animate-bounce animation-delay-3000">‚ú®</div>
        <div class="absolute -bottom-2 -right-4 text-2xl animate-bounce animation-delay-1500">üéä</div>
      </div>
    </div>
  </div>
</div>

<style>
  @keyframes pulse {
    0%, 100% { opacity: 0.2; }
    50% { opacity: 0.4; }
  }
  
  .animation-delay-2000 {
    animation-delay: 2s;
  }
  
  .animation-delay-4000 {
    animation-delay: 4s;
  }
  
  .animate-pulse {
    animation: pulse 3s ease-in-out infinite;
  }
  
  .backdrop-blur-xl {
    backdrop-filter: blur(16px);
  }
  
  .backdrop-blur-sm {
    backdrop-filter: blur(4px);
  }
  .animation-delay-1000 { animation-delay: 1s; }
  .animation-delay-1500 { animation-delay: 1.5s; }
  .animation-delay-2000 { animation-delay: 2s; }
  .animation-delay-3000 { animation-delay: 3s; }
  
  @keyframes modalShow {
    from { opacity: 0; transform: scale(0.8); }
    to { opacity: 1; transform: scale(1); }
  }
  
  .modal-show {
    animation: modalShow 0.5s ease-out forwards;
  }
  /* Add this to your existing style block */
  svg {
    height: auto !important;
  }
  
  /* Specifically fix the success modal SVG */
  #successModal svg {
    width: 3rem !important;
    height: 3rem !important;
  }
  
  /* Fix any nav SVG conflicts */
  nav svg, header svg {
    width: 1.5rem !important;
    height: 1.5rem !important;
  }
</style>
</style>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  // Get product data from hidden inputs
  const productPrice = parseInt(document.getElementById('productPrice').value);
  const productId = document.getElementById('productId').value;
  const razorpayKey = document.getElementById('razorpayKey').value;
  const productName = document.getElementById('productName').value;
  const productImage = document.getElementById('productImage').value;
  const userName = document.getElementById('userName').value;
  const userEmail = document.getElementById('userEmail').value;
  
  const quantityInput = document.getElementById('quantity');
  const totalAmountSpan = document.getElementById('totalAmount');
  const decreaseBtn = document.getElementById('decreaseBtn');
  const increaseBtn = document.getElementById('increaseBtn');

  // Update total amount
  function updateTotal() {
    const quantity = parseInt(quantityInput.value);
    const total = productPrice * quantity;
    totalAmountSpan.textContent = total;
  }

  // Quantity controls
  decreaseBtn.addEventListener('click', () => {
    let quantity = parseInt(quantityInput.value);
    if (quantity > 1) {
      quantityInput.value = quantity - 1;
      updateTotal();
    }
  });

  increaseBtn.addEventListener('click', () => {
    let quantity = parseInt(quantityInput.value);
    if (quantity < 10) {
      quantityInput.value = quantity + 1;
      updateTotal();
    }
  });

  // Form submission
  document.getElementById('orderForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const quantity = document.getElementById('quantity').value;

    try {
      // Create Razorpay order
      const response = await fetch('/create-razorpay-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productId, quantity })
      });

      const data = await response.json();

      if (data.orderId) {
        // Initialize Razorpay
        const options = {
          key: data.key,
          amount: data.amount,
          currency: data.currency,
          name: 'SwiftCart',
          description: `${data.product.name} (Qty: ${quantity})`,
          image:'/SwiftCart-logo.png',
          order_id: data.orderId,
          handler: async function (response) {
            console.log('Razorpay response:', response); // Debug log
            
            try {
              // Verify payment
              const verifyResponse = await fetch('/verify-payment', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  razorpay_order_id: response.razorpay_order_id,
                  razorpay_payment_id: response.razorpay_payment_id,
                  razorpay_signature: response.razorpay_signature,
                  productId: productId,  // Make sure these variables are accessible
                  quantity: parseInt(quantity) // Make sure quantity is an integer
                })
              });

              console.log('Verify response status:', verifyResponse.status); // Debug log
              
              const verifyData = await verifyResponse.json();
              
              if (verifyData.success) {
                const qty = document.getElementById('quantity').value;
                  const total = productPrice * qty;
                  showSuccessModal(productName, qty, total);
                } else {
                  alert('‚ùå Payment verification failed! ' + (verifyData.message || 'Please try again.'));
                }
            } catch (error) {
              console.error('Verification error:', error);
              alert('‚ùå Error during payment verification! Please try again.');
            }
          },
          prefill: {
            name: data.user.name,
            email: data.user.email
          },
          theme: {
            color: '#3B82F6'
          }
        };

        const rzp = new Razorpay(options);
        rzp.open();
      } else {
        alert('Failed to create order');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Something went wrong!');
    }
  });
   function showSuccessModal(productName, quantity, total) {
    // Populate modal data
    document.getElementById('successProductName').textContent = productName;
    document.getElementById('successQuantity').textContent = quantity;
    document.getElementById('successTotal').textContent = '‚Çπ' + total;
    
    // Show modal with animation
    const modal = document.getElementById('successModal');
    const content = document.getElementById('successContent');
    
    modal.classList.remove('hidden');
    setTimeout(() => {
      modal.classList.remove('opacity-0');
      content.classList.add('scale-100');
      content.classList.remove('scale-90');
    }, 10);
  }

  function closeSuccessModal() {
    const modal = document.getElementById('successModal');
    const content = document.getElementById('successContent');
    
    content.classList.add('scale-90');
    content.classList.remove('scale-100');
    modal.classList.add('opacity-0');
    
    setTimeout(() => {
      modal.classList.add('hidden');
      window.location.href = '/orders';
    }, 500);
  }

  function orderAgain() {
    window.location.reload();
  }
</script>